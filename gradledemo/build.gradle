plugins {
  id 'com.android.application'
  id 'com.lee.gradle'
}

apply plugin: TestPlugin

apply from: 'tasktest2.gradle'

println "testParams is ${testParams}"

android {
  compileSdkVersion 30
  buildToolsVersion "30.0.3"

  defaultConfig {
    applicationId "com.zm.gradledemo"
    minSdkVersion 19
    targetSdkVersion 30
    versionCode 1
    versionName "1.0"

    flavorDimensions "default"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

  }

  buildTypes {
    debug{
      applicationIdSuffix '.debug' // applicationId加后缀
      debuggable true
      jniDebuggable true
//      minifyEnabled true // 混淆
      multiDexEnabled true
//      proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
//      shrinkResources true  // 移除未使用的资源，必须同时设置minifyEnable为true才行，否则报错
//      signingConfig signingConfigs.debug
    }
    release {
      minifyEnabled false
      zipAlignEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  signingConfigs{
    debug{

    }
    release{

    }
  }
  productFlavors{
    free{
      buildConfigField 'String', "WEB_TEST", 'test'
      resValue "String", "hello", '"Hello i am free"'
    }
    charge{
      buildConfigField 'String', "WEB_TEST", "\"http://baidu.com\""
      resValue "String", "hello", '"Hello i am charge"'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  dexOptions{
    javaMaxHeapSize '4g'
    incremental true
    preDexLibraries true
    threadCount 2
  }

  // 修改打包的apk的包名
  applicationVariants.all { variant ->
    println "variant is ${variant.toString()} \n buildType is ${variant.buildType.name}\n" +
        "flavorName is ${variant.flavorName}"

    variant.outputs.all { output ->
      println "output is ${output} \n outputFile is ${output.outputFile}"
      if (output.outputFile!=null && output.outputFile.name.endsWith('.apk') &&
          variant.flavorName == 'charge' && variant.buildType.name == 'debug') {
        def apkFileName = "${project.name}_${variant.flavorName}_${variant.versionName}_${buildTime()}.apk"
        outputFileName = apkFileName
      }
    }
  }
}

dependencies {

  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'com.google.android.material:material:1.1.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  testImplementation 'junit:junit:4.+'
  androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task wrapper(type: Wrapper){
  gradleVersion = '6.1.1'
  distributionUrl = 'http://services.gradle.org/distributions/gradle-6.1.1-all.zip'
}


subprojects {
      println "subprojects configurion for $project.name" //遍历子 Project，project 变量对应每个子 Project
      buildscript { //这也是一个 SB
          //为每个子 Project 加载 properties.gradle 。当然，这句话可以放到 buildscript 花括号之后
          apply from: rootProject.getRootDir().getAbsolutePath() + "/test.gradle"
      }//buildscript 结束
}

class TestPlugin implements Plugin<Project>{

  @Override
  void apply(org.gradle.api.Project project) {
    project.task('taskTest'){
      doLast{
        println 'taskTest doLast'
      }
    }
  }
}